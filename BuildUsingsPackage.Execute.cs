/*
 * BuildUsingsPackage.Execute.cs
 *
 *   Created: 2022-12-01-02:52:09
 *   Modified: 2022-12-01-02:52:09
 *
 *   Author: Justin Chase <justin@justinwritescode.com>
 *
 *   Copyright ¬© 2022-2023 Justin Chase, All Rights Reserved
 *      License: MIT (https://opensource.org/licenses/MIT)
 */
#pragma warning disable

namespace MSBuild.UsingsSdk;
using XElementOrProjectItemInstance = AnyOf<
    System.Xml.Linq.XElement,
    Microsoft.Build.Execution.ProjectItemInstance
>;

public partial class BuildUsingsPackage
{
    public override bool Execute()
    {
        Log.LogMessage(
            MessageImportance.High,
            $"Executing {ThisAssembly.Project.AssemblyName} version {ThisAssembly.Info.FileVersion} on file {InputFile}..."
        );

        System.Diagnostics.Debugger.Launch();

        Log.LogMessage($"UsingsSdk Version {ThisAssembly.Info.InformationalVersion} executing...");

        ComparersImplementation.Logger = this.Log;

        Log.LogMessage("Found " + AllProjects.Count() + " imported projects to process");

        var xUsings = XUsings;
        var usings = Usings;
        var xProjectReferences = XProjectReferences;
        var xPackageReferences = XPackageReferences;
        var projectReferences = ProjectReferences;
        var packageReferences = PackageReferences;
        var properties = MakeProperties(); //.OrderBy(x => x.Name)).ToArray();
        var projectReferenceTuples = xProjectReferences.Join(projectReferences);
        var packageReferenceTuples = xPackageReferences.Join(packageReferences);
        var usingsTuples = xUsings.Join(usings);

        var usingsFile = new XDocument(
            new XComment("<auto-generated>"),
            new XComment(
                """"
                This code was generated by a tool.  Do not modify it.
                Any changes you make will be lost the next time the file is generated.
                If you need to change its contents, change the source file and regenerate it.
                """"
            ),
            new XComment("</auto-generated>"),
            new XElement(
                "Project",
                new XComment("Usings: " + xUsings.Length),
                new XElement(
                    "ItemGroup",
                    new XAttribute("Label", "Usings"),
                    new XComment("‚¨áÔ∏è Global Usings ‚¨áÔ∏è"),
                    xUsings
                        .Select(x => FormatReference(x, "Using"))
                        .Append<XNode>(new XComment("‚¨ÜÔ∏è  ü´¥üèª üí™üèª  ‚¨ÜÔ∏è"))
                ),
                new XElement(
                    "ItemGroup",
                    new XAttribute("Label", "Package References"),
                    new XComment("üì¶ ‚¨áÔ∏è Package References ‚¨áÔ∏è  üì¶"),
                    XPackageReferences
                        .Select(x => FormatReference(x, "PackageReference", false))
                        .Append<XNode>(new XComment("üì¶  ‚¨ÜÔ∏è  ‚¨ÜÔ∏è  üì¶"))
                ),
                new XElement(
                    "ItemGroup",
                    new XAttribute("Label", "Project References"),
                    new XComment("‚¨áÔ∏è Project References ‚¨áÔ∏è"),
                    projectReferenceTuples
                        .Select(x => FormatReference(x, "ProjectReference"))
                        .Append<XNode>(new XComment("‚¨ÜÔ∏è    üíª    ‚¨ÜÔ∏è"))
                )
            )
        );

        var usingsProjectFile = new XDocument(
            new XComment(
                """"

                    <auto-generated>
                        This code was generated by a tool.  Do not modify it.
                        Any changes you make will be lost the next time the file is generated.
                        If you need to change its contents, change the source file and regenerate it.
                    </auto-generated>

                """"
            ),
            new XElement(
                "Project",
                new XAttribute("Sdk", "Microsoft.NET.Sdk"),
                // new XAttribute("DefaultTargets", "Pack"),
                new XComment("properties: " + properties.Length),
                new XComment("‚¨áÔ∏è Properties ‚¨áÔ∏è"),
                new XElement("PropertyGroup", properties),
                new XElement(
                    "ItemGroup",
                    XPackageReferences
                        .Select(x => FormatReference(x, "PackageReference", true))
                        .Concat(DefaultPackageReferences)
                        .Distinct()
                ),
                new XElement(
                    "ItemGroup",
                    new XElement(
                        "PackageFile",
                        new XAttribute("Include", "$(MSBuildThilsFileDirectory)README.md"),
                        new XAttribute("Pack", "true"),
                        new XAttribute("PackagePath", "")
                    ),
                    new XElement(
                        "PackageFile",
                        new XAttribute("Include", Combine(GetDirectoryName(InputFile), OutputFile)),
                        new XAttribute("Pack", "true"),
                        new XAttribute("PackagePath", "build/%(Filename)%(Extension)")
                    ),
                    new XElement(
                        "PackageFile",
                        new XAttribute("Include", IconFile),
                        new XAttribute("Pack", "true"),
                        new XAttribute("PackagePath", GetFileName(IconFile))
                    ),
                    new XElement("None", new XAttribute("Remove", "**/$(AssemblyName).*")),
                    new XElement("None", new XAttribute("Remove", "**/*.cs"))
                )
            )
        );

        Log.LogMessage("Properties: " + properties.Length);
        Log.LogMessage("Usings: " + xUsings.Length);
        Log.LogMessage("ProjectReferences: " + xProjectReferences.Length);
        Log.LogMessage("PackageReference: " + xPackageReferences.Length);

        if (Directory.Exists(OutputDirectory))
        {
            Delete(OutputDirectory, true);
        }

        _ = CreateDirectory(OutputDirectory);

        using (var outFile = CreateText(OutputFile))
        {
            usingsFile.Save(outFile);
        }

        using (var outFile = CreateText(UsingsProjectFile))
        {
            usingsProjectFile.Save(outFile);
        }

        using (var outFile = CreateText(PackageReadmeFile))
        {
            outFile.WriteLine(GenerateMarkdownReadme());
        }

        // using (var outFile = File.CreateText(Path.Combine(OutputDirectory, "Directory.Build.props")))
        // {
        //     outFile.WriteLine(EmptyProjectFile);
        // }

        // using (var outFile = File.CreateText(Path.Combine(OutputDirectory, "Directory.Build.targets")))
        // {
        //     outFile.WriteLine(EmptyProjectFile);
        // }

        // Copy(Combine(PackageLibDirectory, "../ContentFiles/global.json"), Combine(OutputDirectory, "global.json"), true);
        Log.LogMessage(usingsFile.ToString());
        Log.LogMessage("Wrote file: " + OutputFile);

        Copy(IconFile, Combine(OutputDirectory, "Icon.png"), true);

        WriteAllText(
            NuGetPackagesExistCachePath,
            JsonSerializer.Serialize(NuGetPackagesExistCache)
        );

        return true;
    }
}
